<?php

namespace App\Services;

use GuzzleHttp\Client;
use Illuminate\Support\Facades\Log;

class OpenAIConfig
{
    protected $apiUrl;
    protected $client;
    protected $model;

    public function __construct()
    {
        // Use only the working endpoint
        $this->apiUrl = env('LOCAL_AI_API_URL', 'http://10.58.38.218:30011/v1/completions');
        $this->model = env('LOCAL_AI_MODEL', '/mnt/data/llms/Llama-3.3-70B-Instruct');
        $this->client = new Client();
    }

    /**
     * Sends a request to Local AI API with a given prompt and review.
     *
     * @param string $prompt
     * @param string $reviewText
     * @return array|null
     */
    public function sendRequest($prompt, $reviewText)
    {
        // Combine system prompt and user content into a single prompt
        $combinedPrompt = $prompt . "\n\nReview Text: " . $reviewText;

        $requestBody = [
            'model' => $this->model,
            'prompt' => $combinedPrompt,
            'temperature' => 0.0,
            'top_p' => 0.95,
            'max_tokens' => 500,
        ];

        try {
            Log::info('Sending AI request:', [
                'url' => $this->apiUrl,
                'promptLength' => strlen($combinedPrompt)
            ]);

            $response = $this->client->post($this->apiUrl, [
                'headers' => [
                    'Content-Type' => 'application/json',
                ],
                'json' => $requestBody,
                'proxy' => [
                    'http' => null,
                    'https' => null,
                ],
                'timeout' => 300,
                'connect_timeout' => 30,
                'verify' => false,
            ]);

            $responseBody = json_decode($response->getBody()->getContents(), true);

            Log::info('AI response received:', [
                'statusCode' => $response->getStatusCode(),
                'hasChoices' => isset($responseBody['choices']),
                'hasText' => isset($responseBody['choices'][0]['text'])
            ]);

            // Extract the text from the response structure
            if (isset($responseBody['choices'][0]['text'])) {
                $rawContent = trim($responseBody['choices'][0]['text']);
                
                if (empty($rawContent)) {
                    Log::warning('AI returned empty text content');
                    return null;
                }
                
                Log::info('Raw AI content received:', [
                    'contentLength' => strlen($rawContent),
                    'contentPreview' => substr($rawContent, 0, 100) . '...'
                ]);
                
                $cleanedContent = $this->extractAndCleanJsonFromResponse($rawContent);
                
                return [
                    'choices' => [
                        [
                            'message' => [
                                'content' => $cleanedContent
                            ]
                        ]
                    ]
                ];
            } else {
                Log::warning('No choices[0].text in response:', [
                    'responseKeys' => array_keys($responseBody ?? [])
                ]);
                return null;
            }

        } catch (\Exception $e) {
            Log::error('Local AI API Request Failed: ' . $e->getMessage());
            return null;
        }
    }

    /**
     * Extract and clean JSON from the AI response
     *
     * @param string $rawResponse
     * @return string
     */
    private function extractAndCleanJsonFromResponse($rawResponse)
    {
        // Find all JSON objects in the response
        preg_match_all('/\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/', $rawResponse, $matches);
        
        if (!empty($matches[0])) {
            // Get the first complete JSON object
            $jsonString = $matches[0][0];
            
            // Validate that it's proper JSON
            $decoded = json_decode($jsonString, true);
            if (json_last_error() === JSON_ERROR_NONE) {
                Log::info('Extracted valid JSON from response');
                return $jsonString;
            }
        }

        // If no valid JSON found, try to extract from lines containing JSON-like content
        $lines = explode("\n", $rawResponse);
        foreach ($lines as $line) {
            $line = trim($line);
            if (strpos($line, '{') === 0 && strpos($line, '}') !== false) {
                $decoded = json_decode($line, true);
                if (json_last_error() === JSON_ERROR_NONE) {
                    Log::info('Extracted JSON from line');
                    return $line;
                }
            }
        }

        // If still no valid JSON, return a basic response based on the text
        Log::warning('No valid JSON found, creating basic response');
        return $this->createBasicSentimentResponse($rawResponse);
    }

    /**
     * Create basic sentiment response when JSON extraction fails
     *
     * @param string $response
     * @return string
     */
    private function createBasicSentimentResponse($response)
    {
        $responseLower = strtolower($response);
        
        // Determine overall sentiment
        $overallSentiment = 'Neutral';
        if (strpos($responseLower, 'good') !== false || 
            strpos($responseLower, 'great') !== false || 
            strpos($responseLower, 'excellent') !== false ||
            strpos($responseLower, 'love') !== false) {
            $overallSentiment = 'Positive';
        } elseif (strpos($responseLower, 'bad') !== false || 
                  strpos($responseLower, 'terrible') !== false || 
                  strpos($responseLower, 'awful') !== false ||
                  strpos($responseLower, 'hate') !== false) {
            $overallSentiment = 'Negative';
        }
        
        $result = [
            'generic_attributes' => [
                'overallSentiment' => $overallSentiment,
                'customerService' => $overallSentiment,
                'userExperience' => $overallSentiment
            ],
            'category_specific_attributes' => [
                '5G network' => 'Neutral',
                'network coverage' => 'Neutral'
            ]
        ];
        
        return json_encode($result);
    }
}

=========================================
=========================================
=========================================

TestAiCommand.php app/Console/Commands/TestAiCommand.php

php artisan test:ai

<?php

namespace App\Console\Commands;

use App\Services\OpenAIConfig;
use App\Services\OpenAIPrompt;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class TestAiCommand extends Command
{
    protected $signature = 'test:ai';
    protected $description = 'Test AI connection from command line';

    public function handle()
    {
        $this->info('Testing AI connection from command line...');
        
        $openAIConfig = new OpenAIConfig();
        $openAIPrompt = new OpenAIPrompt();
        
        // Use minimal test data
        $brandDetails = [
            'brandName' => 'Test Brand',
            'category' => 'Test Category',
            'genericAttributes' => '{"test":"test"}',
            'categorySpecificAttributes' => '{"test":"test"}'
        ];
        
        $prompt = $openAIPrompt->sentimentAnalysisPrompt($brandDetails);
        $reviewText = "This is a test review";
        
        $this->info('Sending request...');
        
        $response = $openAIConfig->sendRequest($prompt, $reviewText);
        
        if ($response && isset($response['choices'][0]['message']['content'])) {
            $this->info('✅ SUCCESS: AI responded with content');
            $this->info('Content length: ' . strlen($response['choices'][0]['message']['content']));
        } else {
            $this->error('❌ FAILED: AI returned no content');
            $this->error('Response: ' . json_encode($response));
        }
        
        $this->info('Check Laravel logs for detailed debug info');
    }
}
