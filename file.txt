<?php

namespace App\Services;

use GuzzleHttp\Client;
use Illuminate\Support\Facades\Log;

class LlamaAPIService
{
    protected $apiUrl;
    protected $client;

    public function __construct()
    {
        $this->apiUrl = env('LLAMA_API_URL', 'http://10.58.38.218:30011/v1/completions');
        $this->client = new Client();
    }

    /**
     * Sends a request to the local Llama API with a given prompt and review text.
     *
     * @param string $prompt
     * @param string $reviewText
     * @param int $maxTokens
     * @return array|null
     */
    public function sendRequest($prompt, $reviewText, $maxTokens = 600)
    {
        // Combine prompt and review text for the completions endpoint
        $combinedPrompt = "{$prompt}\n\nReview: {$reviewText}";

        $requestBody = [
            'model' => '/mnt/data/llms/Llama-3.3-70B-Instruct',
            'prompt' => $combinedPrompt,
            'temperature' => 0.1,
            'top_p' => 0.95,
            'max_tokens' => $maxTokens,
        ];

        try {
            $response = $this->client->post($this->apiUrl, [
                'headers' => [
                    'Content-Type' => 'application/json',
                ],
                'json' => $requestBody,
                'curl' => [
                    CURLOPT_NOPROXY => '10.58.38.218',
                ],
            ]);

            $responseBody = json_decode($response->getBody()->getContents(), true);

            return $responseBody;
        } catch (\Exception $e) {
            Log::error('Llama API Request Failed: ' . $e->getMessage());
            return null;
        }
    }
}


==================================================================================

public function generateReportAIReport(Request $request)
{
    $app_id                             = $request->app_id;
    $prompt_id                          = $request->prompt_id;
    $prompt                             = Prompt::where("id", $prompt_id)->value("prompt");
    $start_ai_google_reviews_date       = $request->start_ai_google_reviews_date;
    $end_ai_google_reviews_date         = $request->end_ai_google_reviews_date;

    $currentDate                        = Carbon::now();
    $threeMonthsAgo                     = $currentDate->subMonths(3);
                // ->whereRaw('LENGTH(google_reviews.text) >= 50')

    if (!is_null($start_ai_google_reviews_date) && !is_null($end_ai_google_reviews_date)) {
        $googleReviews = DB::table('GoogleReview')
            ->join('GoogleApp', 'GoogleReview.app_id', '=', 'GoogleApp.id')
            ->where('GoogleApp.id', $app_id)
            ->whereBetween('GoogleReview.date', [$start_ai_google_reviews_date, $end_ai_google_reviews_date])
            ->select('GoogleReview.text');
    } else {
        $googleReviews = DB::table('GoogleReview')
            ->select('GoogleReview.text')
            ->join('GoogleApp', 'GoogleReview.app_id', '=', 'GoogleApp.id')
            ->where('GoogleApp.id', $app_id)
            ->whereDate('GoogleReview.date', '>=', $threeMonthsAgo);
    }

    $googleReviews = $googleReviews->get();

    // Better formatting for reviews - create a cleaner text structure
    $reviewTexts = [];
    foreach ($googleReviews as $index => $item) {
        $reviewTexts[] = "Review " . ($index + 1) . ": " . trim($item->text);
    }
    
    // Join reviews with clear separators
    $text = implode("\n\n", $reviewTexts);
    
    // If no reviews, set appropriate message
    if (empty($reviewTexts)) {
        $text = 'No significant reviews available for analysis. please dont show the user the report. tell the user to make sentiment analysis first.';
    }
    $user = User::find(Auth::user()->id);

    // Check token availability
    $provider = new EncoderProvider();
    $encoder = $provider->getForModel('gpt-4-turbo');
    $systemMessageTokens = count($encoder->encode($prompt));
    $userMessageTokens = count($encoder->encode($text));
    $inputTokens = $systemMessageTokens + $userMessageTokens;

    if ($user->user_token < $inputTokens) {
        Log::info('Insufficient tokens for user', ['userId' => $user->id]);
        return response()->json(['error' => 'insufficient_tokens'], 400);
    }

    if (empty($reviewTexts)) {
        $text = 'No significant reviews available for analysis. please dont show the user the report. tell the user to make sentiment analysis first.';
    }

    // Instantiate OpenAIConfig class and send request (using more tokens for reports)
    $openAI = new OpenAIConfig();
    $responseBody = $openAI->sendRequest($prompt, $text, 1500);

    // Log the full response for debugging
    Log::info('API Response for Report', ['response' => $responseBody]);

    if ($responseBody && isset($responseBody['choices'][0]['text'])) {
        $report = $responseBody['choices'][0]['text'];

        // Log the response text
        Log::info('Report Response text', ['text' => $report]);

        // Check for output tokens and deduct from user
        $outputTokens = count($encoder->encode($report));
        if ($user->user_token < $outputTokens) {
            Log::info('Insufficient tokens for user', ['userId' => $user->id]);
            return response()->json(['error' => 'insufficient_tokens'], 400);
        }

        $user->user_token -= ($inputTokens + $outputTokens);
        $user->save();

        broadcast(new NewSentimentEvent());
    } else {
        Log::warning('API returned no content for report', ['response' => $responseBody]);
        $report = 'Error processing request.';
    }

    return response()->json(['report' => $report]);
}
