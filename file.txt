<?php

namespace App\Http\Controllers;

use App\Services\OpenAIConfig;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class SentimentTestController extends Controller
{
    protected $openAIConfig;

    public function __construct(OpenAIConfig $openAIConfig)
    {
        $this->openAIConfig = $openAIConfig;
    }

    /**
     * Test sentiment analysis without using a job
     */
    public function testSentimentDirect()
    {
        // Hardcoded brand details
        $brandDetails = [
            'brandName' => 'Vodafone',
            'category' => 'Telecommunications',
            'genericAttributes' => 'overallSentiment, customerService, userExperience',
            'categorySpecificAttributes' => '5G network, network coverage, call quality, data speed'
        ];

        // Hardcoded review text
        $reviewText = "The 5G network is amazing and super fast! Customer service was really helpful when I had issues. However, the network coverage in rural areas could be better. Overall, I'm quite satisfied with the service.";

        try {
            // Generate the prompt
            $prompt = $this->openAIConfig->sentimentAnalysisPrompt($brandDetails);
            
            Log::info('Testing sentiment analysis directly', [
                'brand' => $brandDetails['brandName'],
                'reviewLength' => strlen($reviewText)
            ]);

            // Send request to AI
            $response = $this->openAIConfig->sendRequest($prompt, $reviewText);

            if ($response && isset($response['choices'][0]['message']['content'])) {
                $sentimentResult = $response['choices'][0]['message']['content'];
                
                // Try to decode JSON to validate
                $decodedResult = json_decode($sentimentResult, true);
                
                if (json_last_error() === JSON_ERROR_NONE) {
                    Log::info('Sentiment analysis completed successfully', [
                        'result' => $decodedResult
                    ]);
                    
                    return response()->json([
                        'success' => true,
                        'message' => 'Sentiment analysis completed',
                        'brand' => $brandDetails['brandName'],
                        'review' => $reviewText,
                        'sentiment_result' => $decodedResult,
                        'raw_response' => $sentimentResult
                    ]);
                } else {
                    Log::warning('Invalid JSON response received', [
                        'raw_response' => $sentimentResult
                    ]);
                    
                    return response()->json([
                        'success' => false,
                        'message' => 'Invalid JSON response from AI',
                        'raw_response' => $sentimentResult
                    ], 422);
                }
            } else {
                Log::error('No valid response from AI service');
                
                return response()->json([
                    'success' => false,
                    'message' => 'No response from AI service'
                ], 500);
            }

        } catch (\Exception $e) {
            Log::error('Sentiment analysis failed', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'success' => false,
                'message' => 'Sentiment analysis failed: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Test with another example
     */
    public function testSentimentNegative()
    {
        $brandDetails = [
            'brandName' => 'Orange Telecom',
            'category' => 'Telecommunications',
            'genericAttributes' => 'overallSentiment, customerService, userExperience, valueForMoney',
            'categorySpecificAttributes' => '5G network, network coverage, call quality, billing accuracy'
        ];

        $reviewText = "Terrible experience! The network keeps dropping calls and the 5G barely works. Customer service was rude and unhelpful. Way too expensive for such poor service quality. I'm switching providers soon.";

        try {
            $prompt = $this->openAIConfig->sentimentAnalysisPrompt($brandDetails);
            $response = $this->openAIConfig->sendRequest($prompt, $reviewText);

            if ($response && isset($response['choices'][0]['message']['content'])) {
                $sentimentResult = $response['choices'][0]['message']['content'];
                $decodedResult = json_decode($sentimentResult, true);
                
                return response()->json([
                    'success' => true,
                    'message' => 'Negative sentiment analysis completed',
                    'brand' => $brandDetails['brandName'],
                    'review' => $reviewText,
                    'sentiment_result' => $decodedResult ?? $sentimentResult,
                    'raw_response' => $sentimentResult
                ]);
            }

            return response()->json([
                'success' => false,
                'message' => 'No response from AI service'
            ], 500);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error: ' . $e->getMessage()
            ], 500);
        }
    }
}
