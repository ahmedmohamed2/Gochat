<?php

namespace App\Services;

use GuzzleHttp\Client;
use Illuminate\Support\Facades\Log;

class OpenAIConfig
{
    protected $apiKey;
    protected $apiUrl;
    protected $client;

    public function __construct()
    {
        $this->apiKey = env('OPENAI_API_KEY');
        $this->apiUrl = env('OPENAI_API_URL', 'https://api.openai.com/v1/chat/completions');
        $this->client = new Client();
    }

    /**
     * Sends a request to OpenAI API with a given prompt and review.
     *
     * @param string $prompt
     * @param string $reviewText
     * @return array|null
     */
    public function sendRequest($prompt, $reviewText)
    {
        $requestBody = [
            'model' => 'gpt-4-turbo',
            'messages' => [
                ['role' => 'system', 'content' => $prompt],
                ['role' => 'user', 'content' => $reviewText],
            ],
            'temperature' => 0.0,
            'max_tokens' => 4096,
        ];

        try {
            $response = $this->client->post($this->apiUrl, [
                'headers' => [
                    'Authorization' => "Bearer {$this->apiKey}",
                    'Content-Type' => 'application/json',
                ],
                'json' => $requestBody,
            ]);

            $responseBody = json_decode($response->getBody()->getContents(), true);

            return $responseBody;
        } catch (\Exception $e) {
            Log::error('OpenAI API Request Failed: ' . $e->getMessage());
            return null;
        }
    }
}





<?php

namespace App\Services;

class OpenAIPrompt
{
    /**
     * Generates a sentiment analysis prompt based on brand details.
     *
     * @param array $brandDetails
     * @return string
     */
    public function sentimentAnalysisPrompt($brandDetails)
    {
        return "You act as a sentiment analyzer for the following brand and its attributes: " .
            "Brand: {$brandDetails['brandName']}, Category: {$brandDetails['category']}, " .
            "generic_attributes: {$brandDetails['genericAttributes']}, " .
            "category_specific_attributes: {$brandDetails['categorySpecificAttributes']}. " .
            "Reply with the sentiment analysis for each attribute from the following review. " .
            "Answer should be in a JSON format including generic_attributes and category_specific_attributes. " .
            "Please reply with only JSON format without adding any other text.";
    }
}
