<?php

namespace App\Services;

use GuzzleHttp\Client;
use Illuminate\Support\Facades\Log;

class OpenAIConfig
{
    protected $apiUrl;
    protected $client;
    protected $model;

    public function __construct()
    {
        $this->apiUrl = env('LOCAL_AI_API_URL', 'http://10.58.38.218:30011/v1/completions');
        $this->model = env('LOCAL_AI_MODEL', '/mnt/data/llms/Llama-3.3-70B-Instruct');
        $this->client = new Client();
    }

    /**
     * Sends a request to Local AI API with a given prompt and review.
     *
     * @param string $prompt
     * @param string $reviewText
     * @return array|null
     */
    public function sendRequest($prompt, $reviewText)
    {
        // Combine system prompt and user content into a single prompt
        $combinedPrompt = $prompt . "\n\nReview Text: " . $reviewText;

        $requestBody = [
            'model' => $this->model,
            'prompt' => $combinedPrompt,
            'temperature' => 0.0,
            'top_p' => 0.95,
            'max_tokens' => 500, // Reduced to prevent repetition
            'stop' => ["\n\n", "REVIEW TEXT", "INSTRUCTIONS"], // Stop sequences to prevent continuation
        ];

        try {
            $response = $this->client->post($this->apiUrl, [
                'headers' => [
                    'Content-Type' => 'application/json',
                ],
                'json' => $requestBody,
                'proxy' => [
                    'http' => null,
                    'https' => null,
                ],
                'timeout' => 300, // 5 minutes
                'connect_timeout' => 30, // 30 seconds for connection
            ]);

            $responseBody = json_decode($response->getBody()->getContents(), true);

            // Extract the text from the response structure
            if (isset($responseBody['choices'][0]['text'])) {
                $rawContent = trim($responseBody['choices'][0]['text']);
                $cleanedContent = $this->extractAndCleanJsonFromResponse($rawContent);
                
                return [
                    'choices' => [
                        [
                            'message' => [
                                'content' => $cleanedContent
                            ]
                        ]
                    ]
                ];
            }

            return $responseBody;
        } catch (\Exception $e) {
            Log::error('Local AI API Request Failed: ' . $e->getMessage());
            return null;
        }
    }

    /**
     * Extract and clean JSON from the AI response
     *
     * @param string $rawResponse
     * @return string
     */
    private function extractAndCleanJsonFromResponse($rawResponse)
    {
        // Log the raw response for debugging
        Log::info('Raw AI Response:', ['response' => $rawResponse]);

        // Check if the response contains descriptive text instead of JSON
        if (strpos($rawResponse, '{') === false || strpos($rawResponse, '}') === false) {
            Log::warning('Response contains no JSON structure, attempting to parse descriptive text');
            return $this->parseDescriptiveResponse($rawResponse);
        }

        // Find all JSON objects in the response
        preg_match_all('/\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/', $rawResponse, $matches);
        
        if (!empty($matches[0])) {
            // Get the first complete JSON object
            $jsonString = $matches[0][0];
            
            // Validate that it's proper JSON
            $decoded = json_decode($jsonString, true);
            if (json_last_error() === JSON_ERROR_NONE) {
                Log::info('Extracted JSON:', ['json' => $jsonString]);
                return $jsonString;
            }
        }

        // If no valid JSON found, try to extract from lines containing JSON-like content
        $lines = explode("\n", $rawResponse);
        foreach ($lines as $line) {
            $line = trim($line);
            if (strpos($line, '{') === 0 && strpos($line, '}') !== false) {
                $decoded = json_decode($line, true);
                if (json_last_error() === JSON_ERROR_NONE) {
                    Log::info('Extracted JSON from line:', ['json' => $line]);
                    return $line;
                }
            }
        }

        // If still no valid JSON, try to parse descriptive response
        Log::warning('No valid JSON found in response, attempting to parse descriptive text');
        return $this->parseDescriptiveResponse($rawResponse);
    }

    /**
     * Parse descriptive text response and convert to JSON
     *
     * @param string $response
     * @return string
     */
    private function parseDescriptiveResponse($response)
    {
        $genericAttributes = [];
        $categorySpecificAttributes = [];
        
        // Define attribute mappings
        $attributeMap = [
            // Generic attributes
            'customer service' => 'customerService',
            'app usability' => 'appUsability',
            'pricing' => 'pricing',
            'security' => 'security',
            'user experience' => 'userExperience',
            'reliability' => 'reliability',
            'accessible' => 'accessibility',
            'credibility' => 'credibility',
            'responsive' => 'responsiveness',
            'harassment' => 'harassmentOrDiscrimination',
            'discrimination' => 'harassmentOrDiscrimination',
            'overall' => 'overallSentiment',
            
            // Category specific attributes
            '5g network' => '5G network',
            'internet speed' => 'internet/data speed',
            'data speed' => 'internet/data speed',
            'network coverage' => 'network coverage',
            'loyalty programs' => 'loyaltyPrograms',
            'bill payment' => 'bill payment options',
            'personalization' => 'Personalization'
        ];
        
        // Convert response to lowercase for easier matching
        $responseLower = strtolower($response);
        
        // Look for positive indicators
        foreach ($attributeMap as $keyword => $attribute) {
            if (strpos($responseLower, $keyword) !== false) {
                // Determine sentiment based on context
                $sentiment = 'Positive'; // Default to positive since the response seems to be listing good things
                
                // Check for negative indicators
                if (strpos($responseLower, "no $keyword") !== false || 
                    strpos($responseLower, "bad $keyword") !== false ||
                    strpos($responseLower, "poor $keyword") !== false) {
                    $sentiment = 'Negative';
                }
                
                // Special case for harassment/discrimination
                if ($keyword === 'harassment' || $keyword === 'discrimination') {
                    if (strpos($responseLower, 'no harassment') !== false || 
                        strpos($responseLower, 'no discrimination') !== false) {
                        $sentiment = 'Positive'; // No harassment is good
                    }
                }
                
                // Categorize the attribute
                if (in_array($attribute, ['customerService', 'appUsability', 'pricing', 'security', 
                                        'userExperience', 'reliability', 'accessibility', 'credibility', 
                                        'responsiveness', 'harassmentOrDiscrimination', 'overallSentiment'])) {
                    $genericAttributes[$attribute] = $sentiment;
                } else {
                    $categorySpecificAttributes[$attribute] = $sentiment;
                }
            }
        }
        
        // Ensure we have some basic attributes if none were found
        if (empty($genericAttributes) && empty($categorySpecificAttributes)) {
            $genericAttributes = [
                'overallSentiment' => 'Positive',
                'customerService' => 'Positive',
                'userExperience' => 'Positive'
            ];
        }
        
        $result = [
            'generic_attributes' => $genericAttributes,
            'category_specific_attributes' => $categorySpecificAttributes
        ];
        
        $jsonResult = json_encode($result);
        Log::info('Parsed descriptive response to JSON:', ['json' => $jsonResult]);
        
        return $jsonResult;
    }
    }
}


***********************************************
***********************************************
***********************************************

<?php

namespace App\Services;

class OpenAIPrompt
{
    /**
     * Generates a sentiment analysis prompt based on brand details.
     *
     * @param array $brandDetails
     * @return string
     */
    public function sentimentAnalysisPrompt($brandDetails)
    {
        return "Analyze the sentiment of the following review for these specific attributes:\n\n" .
            "BRAND: {$brandDetails['brandName']}\n" .
            "CATEGORY: {$brandDetails['category']}\n\n" .
            "ATTRIBUTES TO ANALYZE:\n" .
            "Generic: {$brandDetails['genericAttributes']}\n" .
            "Category Specific: {$brandDetails['categorySpecificAttributes']}\n\n" .
            "INSTRUCTIONS:\n" .
            "1. Read the review text carefully\n" .
            "2. For each attribute, determine if the sentiment is Positive, Negative, or Neutral\n" .
            "3. Return ONLY a JSON object in this EXACT format:\n\n" .
            '{"generic_attributes":{"overallSentiment":"Positive","customerService":"Positive"},"category_specific_attributes":{"5G network":"Positive","loyaltyPrograms":"Neutral"}}' . "\n\n" .
            "IMPORTANT RULES:\n" .
            "- Use only: Positive, Negative, or Neutral\n" .
            "- Return ONLY the JSON object\n" .
            "- No additional text before or after the JSON\n" .
            "- No explanations or descriptions\n" .
            "- Do not repeat the JSON\n" .
            "- Make sure JSON is valid and complete\n\n" .
            "REVIEW TEXT TO ANALYZE:\n";
    }

    /**
     * Alternative simple prompt that might work better with your model
     *
     * @param array $brandDetails
     * @return string
     */
    public function simplePrompt($brandDetails)
    {
        return "Review sentiment analysis.\n\n" .
            "Attributes: {$brandDetails['genericAttributes']}, {$brandDetails['categorySpecificAttributes']}\n\n" .
            "Return JSON only:\n" .
            '{"generic_attributes":{},"category_specific_attributes":{}}\n\n' .
            "Review:\n";
    }

    /**
     * Very direct prompt
     *
     * @param array $brandDetails
     * @return string
     */
    public function directPrompt($brandDetails)
    {
        return "JSON sentiment analysis for: {$brandDetails['genericAttributes']}, {$brandDetails['categorySpecificAttributes']}\n" .
            "Format: {\"generic_attributes\":{\"attr\":\"Positive\"},\"category_specific_attributes\":{\"attr\":\"Positive\"}}\n" .
            "Review: ";
    }
}
