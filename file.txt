public function processMultipleReviews($encoder, $user, $reviews, $prompt, $appId, $source, $jopID)
{
    $openAIConfig = new OpenAIConfig(); // Using your OpenAIConfig service

    // Loop through each review
    foreach ($reviews as $review) {

        // Token calculations
        $systemMessageTokens = count($encoder->encode($prompt));
        $userMessageTokens = count($encoder->encode($review->text));
        $inputTokens = $systemMessageTokens + $userMessageTokens;

        // Check if the user has enough tokens
        if ($user->user_token < $inputTokens) {
            $user->notify(new InsufficientTokensNotification($appId));
            Log::info('Insufficient tokens for user', ['userId' => $user->id, 'reviewId' => $review->id]);
            continue; // Skip to the next review if tokens are insufficient
        }

        try {
            // Use the OpenAIConfig class to send the request
            $response = $openAIConfig->sendRequest($prompt, $review->text);

            // Log the full response for debugging
            Log::info('API Response', ['response' => $response, 'reviewId' => $review->id]);

            // Check if the response is valid (using 'text' for completions API)
            if ($response && isset($response['choices'][0]['text'])) {
                $responseText = $response['choices'][0]['text'];
                
                // Log the response text
                Log::info('Response text', ['text' => $responseText, 'reviewId' => $review->id]);
                
                // Process the content returned by API
                $this->processContent($responseText, $review->id, $inputTokens, $user, $source, $jopID);
            } else {
                Log::warning('API returned no content for review', ['reviewId' => $review->id, 'response' => $response]);
            }
        } catch (\Exception $e) {
            Log::error('Sentiment analysis processing error', ['error' => $e->getMessage(), 'reviewId' => $review->id]);
        }
    }
}
