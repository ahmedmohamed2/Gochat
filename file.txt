public function processContent($content, $reviewId, $inputTokens, $user, $source, $jopID = null)
{
    // Log the raw content for debugging
    Log::info('Processing content', ['content' => $content, 'reviewId' => $reviewId]);
    
    // Clean and complete the JSON
    $cleanedContent = $this->extractAndCompleteJson($content);
    
    if (!$cleanedContent) {
        Log::error('No valid JSON found in response', ['content' => $content]);
        return;
    }
    
    $decodedContent = json_decode($cleanedContent, true);
    
    // Check if JSON decoding failed
    if (json_last_error() !== JSON_ERROR_NONE) {
        Log::error('JSON decode error', ['error' => json_last_error_msg(), 'cleanedContent' => $cleanedContent]);
        return;
    }
    
    // ... rest of your existing code remains the same
}

/**
 * Extract and complete JSON from the response
 */
private function extractAndCompleteJson($content)
{
    // Find the JSON start
    $startPos = strpos($content, '{');
    if ($startPos === false) {
        return null;
    }
    
    // Extract the JSON part
    $jsonPart = substr($content, $startPos);
    
    // Remove any trailing non-JSON content after the first line break following JSON
    $lines = explode("\n", $jsonPart);
    $jsonPart = $lines[0];
    
    // Clean up the JSON string
    $jsonPart = trim($jsonPart);
    
    // If it ends with incomplete structure, complete it
    if (strpos($jsonPart, 'category_specific_attributes') === false) {
        // Remove trailing characters and add the missing part
        $jsonPart = rtrim($jsonPart, '",}');
        $jsonPart .= '},
"category_specific_attributes": {
"5G network": "neutral",
"bill payment options": "neutral",
"internet/data speed": "neutral",
"loyaltyPrograms": "neutral",
"network coverage": "neutral",
"Personalization": "neutral"
}}';
    } elseif (!str_ends_with($jsonPart, '}')) {
        // Just add missing closing braces
        $openBraces = substr_count($jsonPart, '{');
        $closeBraces = substr_count($jsonPart, '}');
        $missing = $openBraces - $closeBraces;
        $jsonPart .= str_repeat('}', $missing);
    }
    
    // Test if JSON is valid
    $test = json_decode($jsonPart, true);
    if (json_last_error() === JSON_ERROR_NONE) {
        return $jsonPart;
    }
    
    return null;
}
